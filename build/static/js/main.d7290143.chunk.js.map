{"version":3,"sources":["Header.js","Search.js","Home.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Link","to","this","props","finished","length","style","color","map","elem","index","key","src","Poster","onError","e","target","alt","Title","want","onerror","Component","HOST","concat","Search","state","inputValue","movies","matched","valueChanged","_this","setState","value","searched","preventDefault","fetch","then","response","json","data","Error","_this2","fa","onSubmit","type","onChange","placeholder","margin","fontSize","fontWeight","eachMovie","includes","onClick","addToWatch","addToWant","React","Home","item","prevState","Object","toConsumableArray","Route","exact","path","render","src_Header","src_Search","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_Home","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7290143.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\n\nclass Header extends Component {\n\n    \n    render(){\n\n        return(\n            <div>\n                    <div className =\"header-wrapper\">\n                    <h1>MOVIE FINDER</h1>\n                    </div> \n\n                <section className =\"search-section\">\n                  <Link to = \"/search\" >        \n                  <button className =\"searchIcons\">Search Movies</button>\n                  </Link> \n                </section>\n\n                <section>\n                {this.props.finished.length !== 0  &&\n                    <div >\n                        <h2 style ={{color:\"#015761\"}}>Watched movies list:</h2>\n                        {this.props.finished.map((elem ,index)=>\n                        <li key={index} className = \"search-list\">\n                            <img  className = \"poster-image\"src={elem.Poster}\n                            onError={(e)=>{\n                            e.target.src=\"https://unfvideo.files.wordpress.com/2018/09/nia.jpg\"}}\n                            alt = {elem.Poster}/>\n                            <p>{elem.Title}</p>\n                        </li>\n                    )}\n                    </div>\n                }\n                {this.props.want.length !== 0  &&\n                    <div >\n                        <h2 style ={{color:\"#990000\"}} >Want to watch list:</h2>\n                        {this.props.want.map((elem ,index)=>\n                        <li key={index} className = \"search-list\">\n                            <img  className = \"poster-image\"src={elem.Poster}\n                            onError={(e)=>{e.target.onerror = null;\n                            e.target.src=\"https://unfvideo.files.wordpress.com/2018/09/nia.jpg\"}}\n                            alt = {elem.Poster}/>\n                            <p>{elem.Title}</p>\n                        </li>\n                    )}\n                    </div>\n                }\n                </section>\n            </div>\n        )\n    }\n\n\n}\nexport default Header;","// importing required files from react-dom\nimport React from \"react\";\nimport { FaArrowLeft } from \"react-icons/fa\";\nimport { Link } from \"react-router-dom\";\n\n//our api key and api host.\nconst API_KEY = \"e6672dd2\";\nconst HOST = `https://www.omdbapi.com/?apikey=${API_KEY}&`;\n\n\n//js es6 class called search \n\nclass Search extends React.Component {\n\n  state = {\n    inputValue: \"\",\n    movies: [],\n    matched: \"\"\n  };\n  \n  //this function is for controlled-component.\n  valueChanged = e => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  //Atlast fetching data from our OMDB api and prevent default\n  //when sumbit.\n  searched = e => {\n    e.preventDefault();\n    if (this.state.inputValue !== \"\") {\n      fetch(`${HOST}s=${this.state.inputValue}`)\n        .then(response => response.json())\n        .then(data => !data.Error ?   //it checks the data received from our api is error free\n           this.setState({\n                inputValue: \"\",\n                movies: data.Search,\n                matched: \"\"\n              }) :\n               this.setState({ inputValue: \"\", matched: this.state.inputValue })\n        );\n    }\n  };\n \n \n  render() {\n\n    return (\n      //this is for input and input button\n      <div>\n        <Link to=\"/\">\n          {\" \"}\n          <button className=\"search-back-button\">\n            <FaArrowLeft className=\"arrow-icon\" />\n            Go Back{\" \"}\n          </button>\n        </Link>\n\n        <form className=\"search-form\" onSubmit={e => this.searched(e)}>\n          <input\n            type=\"text\"\n            value={this.state.inputValue}\n            onChange={this.valueChanged}\n            placeholder=\"Search for movies\"\n          />\n          <button className=\"search-button\">Search</button>\n        </form>\n\n        {this.state.matched !== \"\" && (\n          <div style={{ color: \"red\", margin: \"15px\", fontSize: \"20px\" }}>\n            Sorry, no movies found in our database with the name of{\" \"}\n            <span style={{ fontWeight: \"bolder\" }}>\n              {\" \"}\n              \"{this.state.matched}\"!\n            </span>\n          </div>\n        )}\n\n        {this.state.matched === \"\" &&\n\n          this.state.movies.map((eachMovie, index) => (\n\n            <div key={index} className=\"search-list\">\n\n              <img className=\"poster-image\"\n                src={eachMovie.Poster}\n\n                onError={e => {\n                  e.target.onerror = null;\n                  e.target.src =\n                    \"https://unfvideo.files.wordpress.com/2018/09/nia.jpg\";\n                }}\n                alt={eachMovie.Poster} />\n              <p>{eachMovie.Title}</p>\n\n              {!(this.props.finished.map(elem => elem.Title ).includes(eachMovie.Title) ||\n                (this.props.want.map(elem => elem.Title ).includes(eachMovie.Title)))  &&\n\n                (<div key={index}>\n                  <button\n                    className=\"finished\"\n                    onClick={() => this.props.addToWatch(eachMovie)}>\n                    Already Watched\n                  </button>\n\n                  <button\n                    className=\"wish\"\n                    onClick={() => this.props.addToWant(eachMovie)}>\n                    Want to Watch\n                  </button>\n                </div>\n              )}\n            </div>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./Header\"\nimport {Route} from 'react-router-dom'\nimport Search from './Search';\n\n\nclass Home extends Component {\n\n  state ={\n    finished:[],\n    want:[],\n}\n\naddToWatch = (item)=> {\n    this.setState(prevState =>({\n        finished:[...prevState.finished,item]\n    }))\n}\n\naddToWant = (item)=> {\n    this.setState(prevState =>({\n        want:[...prevState.want,item]\n    }))\n}\n\n  render() {\n    return(\n      <div>\n        <Route exact path = \"/\" render ={ ()=>\n        <Header finished = {this.state.finished}\n        want = {this.state.want} />  \n        }/>\n\n        <Route exact path = \"/search\" render ={ ()=>\n        <Search finished = {this.state.finished}\n        want = {this.state.want} \n        addToWant = {this.addToWant}\n        addToWatch = {this.addToWatch} />  \n        }/>\n      </div>\n    )\n  }\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './Home';\nimport {BrowserRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n    <Home />\n    </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}